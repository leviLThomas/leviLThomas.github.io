[{"content":"\u003cp\u003eUsing C as the primary programming language, I developed both server and client components that handle game logic and player interactions. The game simulates a scenario where each player targets the next in a circular sequence, attempting to locate and destroy a single-dot ship on their opponent\u0026rsquo;s grid.\u003c/p\u003e\n\u003ch2 id=\"roadmap\"\u003eRoadmap\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Thread-safe Logging\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Unit Testing\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Fuzz Testing\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Integration Testing\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Cross-Platform Compatibility\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e CI/CD Pipeline\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Serialization\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Docs\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e TUI?\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"original-requirements\"\u003eOriginal Requirements\u003c/h2\u003e\n\u003cp\u003eBattleDot is based off an assignment I was given in the past, the original requirements are as follows:\u003c/p\u003e\n\u003ch3 id=\"technical-requirements\"\u003eTechnical Requirements\u003c/h3\u003e\n\u003cp\u003ePlease implement a Linux-running program in\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e C\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e C++\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Python\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Java\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe whole implementation needs to start with one command (program/script in any language).\nThe game plays by itself after it starts, it is not interactive/does not require input.\u003c/p\u003e\n\u003ch3 id=\"problem-statement\"\u003eProblem Statement\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eRather than having two players oppose each other directly, any player will be attacked by one opponent and in turn will attack a different opponent.\u003c/li\u003e\n\u003cli\u003ePlayers are connected in a ring: A is bombing B who is bombing C, \u0026hellip; who is bombing Z who is bombing A.\u003c/li\u003e\n\u003cli\u003eEach player has a 10x10 grid of \u0026ldquo;dots\u0026rdquo; where one \u0026ldquo;single-dot ship\u0026rdquo; is positioned randomly.\u003c/li\u003e\n\u003cli\u003eA player loses if this ship is bombed\u003c/li\u003e\n\u003cli\u003ePlayers cannot see each other\u0026rsquo;s grids directly.\u003c/li\u003e\n\u003cli\u003eEach player randomly selects a dot location on the enemy grid to bomb and sends the bomb to the enemy.\u003c/li\u003e\n\u003cli\u003eIf the bomb lands in the enemy\u0026rsquo;s dot-ship, the enemy dies; otherwise, it lives.\u003c/li\u003e\n\u003cli\u003eWhen a player dies, relevant neighbors are matched up so that their unfinished games can continue.\u003c/li\u003e\n\u003cli\u003eMust create a log file\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"bonus-points\"\u003eBonus Points\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e A multi-threaded program, or a multi-process program, where the processes communicate using IPC of your choice.\u003c/li\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e If a process leaves the game (for ex. by an external signal), their neighbors become similarly matched up.\u003c/li\u003e\n\u003cli\u003e\u003cinput checked=\"\" disabled=\"\" type=\"checkbox\"\u003e The solution must use connections that could work between multiple computers.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e A new player can be added to BattleDotNet by specifying two adjacent nodes in the BattleDotNet.\u003c/li\u003e\n\u003cli\u003e\u003cinput disabled=\"\" type=\"checkbox\"\u003e Implement without a \u0026ldquo;master\u0026rdquo; node - only peer-to-peer\u003c/li\u003e\n\u003c/ul\u003e\n","description":"A game derived from Battleship where players attack in a ring formation.","image":{"href":"https://www.vectorstock.com/royalty-free-vector/in-paper-sticker-style-sea-vector-15555384","src":"/images/battledot.png"},"permalink":"https://levithomas.dev/projects/battledot/battledot/","title":"BattleDot: An Exercise in Networked Multi-threading"}]